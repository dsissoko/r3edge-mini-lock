package com.r3edge.minilock;

import java.time.Duration;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.Callable;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import com.r3edge.minilock.ExecutionLock.LockDetail;
import com.r3edge.minilock.ExecutionLock.LockStatus;

import lombok.extern.slf4j.Slf4j;

/**
 * Service de gestion des verrous d'ex√©cution (ExecutionLock). Permet
 * d'acqu√©rir, lib√©rer et g√©rer automatiquement les verrous pour garantir
 * qu'une ressource n'est trait√©e que par une seule instance √† la fois.
 */
@Service
@Slf4j
public class ExecutionLockService {

	@Autowired
	private ExecutionLockRepository executionLockRepository;

	private static final long DEFAULT_LOCK_DURATION_MILLI = 2000;

	/**
	 * Tente d'acqu√©rir un verrou sur une ressource donn√©e.
	 *
	 * @param resource      La ressource √† verrouiller.
	 * @param locker        Identifiant de l'instance qui acquiert le verrou.
	 * @param timeoutMillis Dur√©e du verrou en millisecondes.
	 * @return true si le verrou est acquis avec succ√®s, false sinon.
	 */
	public boolean acquireLock(String resource, String locker, long timeoutMillis) {
		Optional<ExecutionLock> existingLockOpt = executionLockRepository.findById(resource);

		if (existingLockOpt.isPresent()) {
			ExecutionLock existingLock = existingLockOpt.get();
			if (existingLock.getStatus() == LockStatus.LOCKED && !existingLock.isExpired()) {
				log.warn("‚õî Lock d√©j√† actif pour {} par {}", resource, existingLock.getLocked_by());
				return false;
			}
			log.info("‚ôªÔ∏è Lock existant mais r√©utilisable pour {}, ancien statut: {}", resource, existingLock.getStatus());
		}

		if (timeoutMillis <= 0) {
			timeoutMillis = DEFAULT_LOCK_DURATION_MILLI;
		}

		ExecutionLock newLock = new ExecutionLock(resource, locker, timeoutMillis);
		executionLockRepository.save(newLock);
		log.info("‚úÖ Lock acquis pour {} par {}", resource, locker);
		return true;
	}

	/**
	 * Lib√®re un verrou d√©tenu par une instance sp√©cifique.
	 *
	 * @param resource La ressource √† lib√©rer.
	 * @param locker   Identifiant de l'instance qui lib√®re le verrou.
	 * @param reason   Raison de la lib√©ration.
	 * @return true si la lib√©ration a r√©ussi, false sinon.
	 */
	public boolean releaseLock(String resource, String locker, LockDetail reason) {
		Optional<ExecutionLock> existingLockOpt = executionLockRepository.findById(resource);

		if (existingLockOpt.isEmpty()) {
			log.warn("‚ö†Ô∏è Tentative de lib√©ration d'un lock inexistant : {}", resource);
			return false;
		}

		ExecutionLock existingLock = existingLockOpt.get();

		if (existingLock.getStatus() == LockStatus.RELEASED) {
			log.warn("‚ö†Ô∏è Lock d√©j√† lib√©r√© pour {} par {}", resource, existingLock.getLocked_by());
			return false;
		}

		if (!existingLock.getLocked_by().equals(locker)) {
			log.warn("‚õî Tentative de lib√©ration d'un lock par un autre locker ! {} ‚â† {}", locker, existingLock.getLocked_by());
			return false;
		}

		existingLock.updateStatus(LockStatus.RELEASED, reason);
		existingLock.setUpdated_at(LocalDateTime.now());
		executionLockRepository.save(existingLock);

		log.info("‚úÖ Lock lib√©r√© avec succ√®s pour {} par {}", resource, locker);
		return true;
	}

	public boolean releaseLockNormal(String resource, String locker) {
		return releaseLock(resource, locker, LockDetail.NORMAL_RELEASE);
	}

	public boolean releaseLockTimeout(String resource) {
		return releaseLock(resource, "SYSTEM", LockDetail.TIMEOUT_EXPIRED);
	}

	public boolean forceReleaseLock(String resource, String adminUser) {
		return releaseLock(resource, adminUser, LockDetail.FORCE_RELEASE_BY_ADMIN);
	}

	public boolean releaseLockOnShutdown(String resource, String locker) {
		return releaseLock(resource, locker, LockDetail.SYSTEM_SHUTDOWN);
	}

	/**
	 * T√¢che planifi√©e ex√©cut√©e toutes les 15 minutes pour lib√©rer les verrous expir√©s.
	 */
	@Scheduled(fixedRate = 900_000)
	public void autoReleaseExpiredLocks() {
		LocalDateTime now = LocalDateTime.now();
		List<ExecutionLock> expiredLocks = executionLockRepository.findExpiredLocks(now);

		if (expiredLocks.isEmpty()) {
			log.info("‚úÖ Aucun lock expir√© √† lib√©rer.");
			return;
		}

		log.info("üîç {} locks expir√©s d√©tect√©s, lib√©ration en cours...", expiredLocks.size());

		for (ExecutionLock lock : expiredLocks) {
			log.info("‚è≥ Lock expir√© d√©tect√© : {} d√©tenu par {}", lock.getResource(), lock.getLocked_by());
			releaseLockTimeout(lock.getResource());
		}

		log.info("‚úÖ Tous les locks expir√©s ont √©t√© lib√©r√©s.");
	}

	/**
	 * Tente d'acqu√©rir un verrou et ex√©cute le bloc de code fourni si le verrou est acquis.
	 * Lib√®re automatiquement le verrou apr√®s l'ex√©cution.
	 *
	 * @param resource   Nom de la ressource √† verrouiller.
	 * @param expiration Dur√©e du verrou avant expiration.
	 * @param task       Bloc de code √† ex√©cuter si le verrou est obtenu.
	 * @return true si le bloc a √©t√© ex√©cut√©, false sinon.
	 */
	public boolean runIfUnlocked(String resource, Duration expiration, Runnable task) {
		String lockerId = getLockerId();

		boolean acquired = acquireLock(resource, lockerId, expiration.toMillis());

		if (!acquired) {
			log.warn("‚õî Impossible d'acqu√©rir le lock pour {}", resource);
			return false;
		}

		try {
			log.info("‚ñ∂Ô∏è Ex√©cution prot√©g√©e de la t√¢che '{}'", resource);
			task.run();
			return true;
		} catch (Exception e) {
			log.error("‚ùå Erreur pendant l‚Äôex√©cution prot√©g√©e de {}", resource, e);
			return false;
		} finally {
			releaseLockNormal(resource, lockerId);
		}
	}

	/**
	 * Variante de {@link #runIfUnlocked} qui retourne une valeur via {@link Callable}
	 * et permet de propager les exceptions.
	 *
	 * @param resource   Nom de la ressource √† verrouiller.
	 * @param expiration Dur√©e du verrou.
	 * @param task       Bloc de code √† ex√©cuter.
	 * @param <T>        Type de la valeur retourn√©e.
	 * @return La valeur retourn√©e par le bloc, ou {@code null} si non ex√©cut√©.
	 * @throws Exception si le bloc l√®ve une exception.
	 */
	public <T> T runIfUnlockedThrowing(String resource, Duration expiration, Callable<T> task) throws Exception {
		String lockerId = getLockerId();

		boolean acquired = acquireLock(resource, lockerId, expiration.toMillis());

		if (!acquired) {
			log.warn("‚õî Impossible d'acqu√©rir le lock pour {}", resource);
			return null;
		}

		try {
			log.info("‚ñ∂Ô∏è Ex√©cution prot√©g√©e (Callable) de '{}'", resource);
			return task.call();
		} finally {
			releaseLockNormal(resource, lockerId);
		}
	}

	/**
	 * Fournit l'identifiant de l'instance courante (peut √™tre externalis√© plus tard).
	 *
	 * @return identifiant unique de l'instance (hostname ou ID technique).
	 */
	private String getLockerId() {
		return System.getenv().getOrDefault("LOCKER_ID", "default-locker");
	}
}
